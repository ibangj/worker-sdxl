name: SDXL Worker Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/RUNNERS.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/RUNNERS.md'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build SDXL Worker Image
    # Using the self-hosted runner with large disk space
    runs-on: [self-hosted, large-disk]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:${{ github.sha }}
        # Using registry cache to speed up builds
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:buildcache
        cache-to: ${{ github.event_name != 'pull_request' && 'type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:buildcache,mode=max' || '' }}
        # Build arguments if needed
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          PYTHON_VERSION=3.10
        # Label the image with build information
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}

  # Optional: Run tests on the built image
  test:
    name: Test SDXL Worker
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: [self-hosted, large-disk]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Pull built image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:${{ github.sha }}
      
    - name: Run tests
      run: |
        echo "Running tests on the SDXL worker image"
        # Add your test commands here
        # For example:
        # docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:${{ github.sha }} python -m pytest /app/tests

  # Deploy to RunPod or other services
  deploy:
    name: Deploy SDXL Worker
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true'
    runs-on: [self-hosted, large-disk]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Push to Amazon ECR
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: worker-sdxl
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Pull image from DockerHub
        docker pull $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG
        
        # Tag for ECR
        docker tag $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Update RunPod Template
      env:
        RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update the RunPod template to use the newly built image
        # This is a placeholder - you'd use the RunPod API
        echo "Updating RunPod template with new image: worker-sdxl:$IMAGE_TAG"
        
        # Example using curl to update a template (you'd need to implement this)
        # curl -X POST "https://api.runpod.io/v2/template/update" \
        #  -H "Content-Type: application/json" \
        #  -H "Authorization: Bearer $RUNPOD_API_KEY" \
        #  -d '{
        #    "templateId": "your-template-id",
        #    "dockerImage": "${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:$IMAGE_TAG"
        #  }' 