name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:buildcache
        cache-to: ${{ github.event_name != 'pull_request' && 'type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/worker-sdxl:buildcache,mode=max' || '' }}

  deploy:
    name: Deploy to AWS
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Pull image from DockerHub and push to ECR
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: worker-sdxl
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Pull image from DockerHub
        docker pull $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG
        
        # Tag for ECR
        docker tag $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $DOCKERHUB_USERNAME/worker-sdxl:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Deploy new version
      run: |
        # Here you would update ECS/EKS services or Lambda functions
        # For example:
        # aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment
        echo "Deployment to be implemented based on your AWS architecture" 